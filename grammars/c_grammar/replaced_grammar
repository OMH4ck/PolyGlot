program:
include_headers translation_unit
translation_unit
---
statement_list:
statement
statement_list statement
---
statement:
labeled_statement
compound_statement
expression_statement
selection_statement
iteration_statement
jump_statement
---
primary_expression:
identifier
num_literal
string_literal
OP_LP expression OP_RP
---
postfix_expression:
primary_expression  **primary_expression->identifier=kDataFixUnit:1:Use**
postfix_expression OP_LBRACKET expression OP_RBRACKET **fixme=kDataFixUnit:1:Use**
postfix_expression OP_LP OP_RP **fixme=kDataFixUnit:1:Use**
postfix_expression OP_LP argument_expression_list OP_RP **fixme=kDataFixUnit:1:Use**
postfix_expression OP_DOT identifier **fixme=kDataFixUnit:1:Use;identifier=kDataClassInstance:1:Use;postfix_expression->identifier=kDataClassName:1:Use;postfix_expression->primary_expression->identifier=kDataClassMember:1:Use**
postfix_expression PTR_OP identifier
postfix_expression INC_OP
postfix_expression DEC_OP
---
argument_expression_list:
assignment_expression
argument_expression_list OP_COMMA assignment_expression
---
unary_expression:
postfix_expression
INC_OP unary_expression
DEC_OP unary_expression
OP_ADD cast_expression
OP_NOT cast_expression
OP_SUB cast_expression
OP_BITNOT cast_expression
OP_STAR cast_expression
OP_BITAND cast_expression
SIZEOF unary_expression
SIZEOF OP_LP type_name OP_RP
---
cast_expression:
unary_expression
OP_LP type_name OP_RP cast_expression
---
multiplicative_expression:
cast_expression
multiplicative_expression OP_STAR cast_expression
multiplicative_expression OP_DIVIDE cast_expression
multiplicative_expression OP_MOD cast_expression
---
additive_expression:
multiplicative_expression
additive_expression OP_ADD multiplicative_expression
additive_expression OP_SUB multiplicative_expression
---
shift_expression:
additive_expression
shift_expression LEFT_OP additive_expression
shift_expression RIGHT_OP additive_expression
---
relational_expression:
shift_expression
relational_expression OP_LESSTHAN shift_expression
relational_expression OP_GTEATERTHAN shift_expression
relational_expression LE_OP shift_expression
relational_expression GE_OP shift_expression
---
equality_expression:
relational_expression
equality_expression EQ_OP relational_expression
equality_expression NE_OP relational_expression
---
and_expression:
equality_expression
and_expression OP_BITAND equality_expression
---
exclusive_or_expression:
and_expression
exclusive_or_expression OP_XOR and_expression
---
inclusive_or_expression:
exclusive_or_expression
inclusive_or_expression OP_BITOR exclusive_or_expression
---
logical_and_expression:
inclusive_or_expression
logical_and_expression AND_OP inclusive_or_expression
---
logical_or_expression:
logical_and_expression
logical_or_expression OR_OP logical_and_expression
---
conditional_expression:
logical_or_expression
logical_or_expression OP_QUESTION three_op_suffix
---
three_op_suffix:
expression OP_COLON conditional_expression
---
assignment_expression:
conditional_expression **conditional_expression=kDataFixUnit:1:Use**
unary_expression OP_EQUAL assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression MUL_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression DIV_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression MOD_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression ADD_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression SUB_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression LEFT_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression RIGHT_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression AND_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression XOR_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
unary_expression OR_ASSIGN assignment_expression **unary_expression=kDataFixUnit:1:Use;assignment_expression=kDataFixUnit:1:Use**
---
expression:
assignment_expression
expression OP_COMMA assignment_expression
---
constant_expression:
conditional_expression
---
declaration:
declaration_specifiers OP_SEMI
declaration_specifiers init_declarator_list OP_SEMI
---
declaration_specifiers:
storage_class_specifier
storage_class_specifier declaration_specifiers
type_specifier
type_specifier declaration_specifiers
type_qualifier
type_qualifier declaration_specifiers
---
init_declarator_list:
init_declarator
init_declarator_list OP_COMMA init_declarator
---
init_declarator:
declarator  **declarator->direct_declarator->identifier=kDataVarName:1:Define**
declarator OP_EQUAL initializer  **declarator->direct_declarator->identifier=kDataVarName:1:Define**
---
storage_class_specifier:
TYPEDEF
EXTERN
STATIC
AUTO
REGISTER
---
type_specifier:
VOID **fixme=kDataVarType:1:Use**
CHAR **fixme=kDataVarType:1:Use**
SHORT **fixme=kDataVarType:1:Use**
INT **fixme=kDataVarType:1:Use**
LONG **fixme=kDataVarType:1:Use**
FLOAT **fixme=kDataVarType:1:Use**
DOUBLE **fixme=kDataVarType:1:Use**
SIGNED **fixme=kDataVarType:1:Use**
UNSIGNED **fixme=kDataVarType:1:Use**
struct_or_union_specifier
enum_specifier
TYPE_NAME
---
struct_or_union_specifier:
struct_or_union identifier extra_struct_declaration_list **fixme=kDataClassType:1:Define;identifier=kDataClassName:1:Define**
struct_or_union extra_struct_declaration_list **fixme=kDataClassType:1:Define**
struct_or_union identifier  **fixme=kDataClassType:1:Use;identifier=kDataClassName:1:Use**
---
struct_or_union:
STRUCT
UNION
---
extra_struct_declaration_list:
OP_LBRACE struct_declaration_list OP_RBRACE  **fixme=kDataStructBody:1:Insertable**
---
struct_declaration_list:
struct_declaration
struct_declaration_list struct_declaration
---
struct_declaration:
specifier_qualifier_list struct_declarator_list OP_SEMI **fixme=kDataVarDefine:1:Define**
---
specifier_qualifier_list:
type_specifier specifier_qualifier_list
type_specifier
type_qualifier specifier_qualifier_list
type_qualifier
---
struct_declarator_list:
struct_declarator **struct_declarator=kDataDeclarator:1:Define**
struct_declarator_list OP_COMMA struct_declarator **struct_declarator=kDataDeclarator:1:Define**
---
struct_declarator:
declarator **declarator->direct_declarator->identifier=kDataVarName:1:Define**
OP_COLON constant_expression
declarator OP_COLON constant_expression
---
enum_specifier:
ENUM OP_LBRACE enumerator_list OP_RBRACE
ENUM identifier OP_LBRACE enumerator_list OP_RBRACE
ENUM identifier
---
enumerator_list:
enumerator
enumerator_list OP_COMMA enumerator
---
enumerator:
identifier
identifier OP_EQUAL constant_expression
---
type_qualifier:
CONST
VOLATILE
---
declarator:
pointer direct_declarator **fixme=kDataDeclarator:1:Define;pointer=kDataPointer:1:Define**
direct_declarator **fixme=kDataDeclarator:1:Define**
---
direct_declarator:
identifier 
OP_LP declarator OP_RP
direct_declarator OP_LBRACKET constant_expression OP_RBRACKET
direct_declarator OP_LBRACKET OP_RBRACKET
direct_declarator OP_LP parameter_type_list OP_RP **direct_declarator=kDataFunctionName:1:Define;parameter_type_list=kDataFunctionArg:1:Define**
direct_declarator OP_LP identifier_list OP_RP
direct_declarator OP_LP OP_RP **direct_declarator=kDataFunctionName:1:Define**
---
pointer:
OP_STAR
OP_STAR type_qualifier_list
OP_STAR pointer **pointer=kDataPointer:1:Define**
OP_STAR type_qualifier_list pointer **pointer=kDataPointer:1:Define**
---
type_qualifier_list:
type_qualifier
type_qualifier_list type_qualifier
---
parameter_type_list:
parameter_list
parameter_list OP_COMMA ELLIPSIS
---
parameter_list:
parameter_declaration
parameter_list OP_COMMA parameter_declaration
---
parameter_declaration:
declaration_specifiers declarator **declarator->direct_declarator->identifier=kDataVarName:1:Define**
declaration_specifiers abstract_declarator
declaration_specifiers
---
identifier_list:
identifier
identifier_list OP_COMMA identifier
---
type_name:
specifier_qualifier_list
specifier_qualifier_list abstract_declarator
---
abstract_declarator:
pointer
direct_abstract_declarator
pointer direct_abstract_declarator
---
direct_abstract_declarator:
OP_LP abstract_declarator OP_RP
OP_LBRACKET OP_RBRACKET
OP_LBRACKET constant_expression OP_RBRACKET
direct_abstract_declarator OP_LBRACKET OP_RBRACKET
direct_abstract_declarator OP_LBRACKET constant_expression OP_RBRACKET
OP_LP OP_RP
OP_LP parameter_type_list OP_RP
direct_abstract_declarator OP_LP OP_RP
direct_abstract_declarator OP_LP parameter_type_list OP_RP
---
initializer:
assignment_expression
OP_LBRACE initializer_list OP_RBRACE
OP_LBRACE initializer_list OP_COMMA OP_RBRACE
---
initializer_list:
initializer
initializer_list OP_COMMA initializer
---
labeled_statement:
identifier OP_COLON statement
CASE constant_expression OP_COLON statement
DEFAULT OP_COLON statement
---
compound_statement:
OP_LBRACE OP_RBRACE **fixme=kDataWhatever:1:Insertable**
OP_LBRACE statement_list OP_RBRACE **fixme=kDataWhatever:1:Insertable**
OP_LBRACE declaration_list OP_RBRACE **fixme=kDataWhatever:1:Insertable**
OP_LBRACE declaration_list statement_list OP_RBRACE **fixme=kDataWhatever:1:Insertable**
---
declaration_list:
declaration **declaration=kDataVarDefine:1:Define;**
declaration declaration_list  **declaration=kDataVarDefine:1:Define;**
---
expression_statement:
OP_SEMI
expression OP_SEMI
---
selection_statement:
IF OP_LP expression OP_RP statement %prec THEN
IF OP_LP expression OP_RP statement ELSE statement
SWITCH OP_LP expression OP_RP statement
---
iteration_statement:
WHILE OP_LP expression OP_RP statement
DO statement WHILE OP_LP expression OP_RP OP_SEMI
FOR OP_LP expression_statement expression_statement OP_RP statement
FOR OP_LP expression_statement expression_statement expression OP_RP statement
---
jump_statement:
GOTO identifier OP_SEMI
CONTINUE OP_SEMI
BREAK OP_SEMI
RETURN OP_SEMI
RETURN expression OP_SEMI
---
translation_unit:
external_declaration **fixme=kDataWhatever:1:Insertable;external_declaration=kDataVarDefine:1:Define;**
external_declaration translation_unit **fixme=kDataWhatever:1:Insertable;external_declaration=kDataVarDefine:1:Define;**
---
external_declaration:
function_definition **function_definition=kDataFunctionType:1:Define;**
declaration
---
include_headers:
include_header
include_headers include_header
---
include_header:
SHARP_AND_INCLUDE OP_LESSTHAN identifier OP_GREATERTHAN_NEWLINE
---
function_definition:
declaration_specifiers declarator declaration_list compound_statement **declaration_specifiers=kDataFunctionReturnValue:1:Use;compound_statement=kDataFunctionBody:1:Insertable**
declaration_specifiers declarator compound_statement **declaration_specifiers=kDataFunctionReturnValue:1:Use;compound_statement=kDataFunctionBody:1:Insertable**
declarator declaration_list compound_statement **compound_statement=kDataFunctionBody:1:Insertable**
declarator compound_statement **compound_statement=kDataFunctionBody:1:Insertable**
---
identifier:
IDENTIFIER
---
string_literal:
STRINGLITERAL
---
num_literal:
float_literal
int_literal
---
float_literal:
FLOATLITERAL
---
int_literal:
INTLITERAL
---
