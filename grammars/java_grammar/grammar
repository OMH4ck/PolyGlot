program:
compilation_unit
---
identifier: 
IDENTIFIER 
--- 
qualified_identifier: 
identifier 
identifier '.' qualified_identifier 
--- 
qualified_identifier_list: 
qualified_identifier 
qualified_identifier ',' qualified_identifier_list 
--- 
compilation_unit: 
'package' qualified_identifier ';' opt_import_declaration_list opt_type_declaration_list 
opt_import_declaration_list opt_type_declaration_list 
--- 
opt_import_declaration_list: 
import_declaration_list 

--- 
import_declaration_list: 
import_declaration 
import_declaration import_declaration_list 
--- 
opt_type_declaration_list: 
type_declaration_list 

--- 
type_declaration_list: 
type_declaration 
type_declaration type_declaration_list 
--- 
import_declaration: 
IMPORT opt_static identifier_list ';'
IMPORT opt_static identifier_list '.' '*' ';'
---
opt_static: 
'static' 

--- 
identifier_list: 
identifier 
identifier_list '.' identifier 
--- 
type_declaration: 
class_or_interface_declaration 
';'
--- 
class_or_interface_declaration: 
opt_modifier_list class_declaration
opt_modifier_list interface_declaration 
--- 
opt_modifier_list: 
modifier_list 

--- 
modifier_list: 
modifier 
modifier modifier_list 
--- 
class_declaration: 
normal_class_declaration 
enum_declaration 
--- 
interface_declaration: 
normal_interface_declaration  
--- 
opt_type_parameters: 
type_parameters 

--- 
opt_extends_type: 
'extends' type 

--- 
opt_implements_type_list: 
'implements' type_list 

--- 
opt_extends_type_list: 
'extends' type_list 

--- 
normal_class_declaration: 
'class' identifier opt_type_parameters opt_extends_type opt_implements_type_list class_body 
--- 
enum_declaration: 
'enum' identifier opt_implements_type_list enum_body 
--- 
normal_interface_declaration: 
'interface' identifier opt_type_parameters opt_extends_type_list interface_body 
---
opt_array_suffix_list: 
array_suffix_list 

--- 
array_suffix_list: 
'[' ']' 
'[' ']' array_suffix_list 
--- 
type: 
basic_type opt_array_suffix_list 
reference_type opt_array_suffix_list 
--- 
basic_type: 
'byte' 
'short' 
'char' 
'int' 
'long' 
'float' 
'double' 
'boolean'
--- 
reference_type: 
identifier_list
identifier_list type_arguments
identifier_list type_arguments '.' reference_type 
--- 
type_arguments: 
'<' type_arguments_list '>' 
--- 
type_arguments_list: 
type_argument 
type_argument ',' type_arguments_list 
--- 
type_argument: 
reference_type
'?'
'?' 'extends' reference_type
'?' 'super' reference_type
--- 
non_wildcard_type_arguments: 
'<' type_list '>' 
---
type_list: 
reference_type 
reference_type ',' type_list 
--- 
type_arguments_or_diamond: 
'<' '>' 
type_arguments 
--- 
non_wildcard_type_arguments_or_diamond: 
'<' '>' 
non_wildcard_type_arguments 
--- 
type_parameters: 
'<' type_parameter_list '>' 
--- 
type_parameter_list: 
type_parameter 
type_parameter ',' type_parameter_list 
--- 
type_parameter: 
identifier 
identifier 'extends' bound 
--- 
bound: 
reference_type 
reference_type '&' bound 
--- 
modifier: 
'public' 
'protected' 
'private' 
'static' 
'abstract' 
'final' 
'native' 
'synchronized' 
'transient' 
'volatile' 
'strictfp' 
--- 
class_body: 
'{' class_body_declaration_list '}' 
--- 
class_body_declaration_list: 
class_body_declaration 
class_body_declaration class_body_declaration_list 
--- 
class_body_declaration: 
';' 
opt_modifier_list member_decl 
opt_static block 
--- 
member_decl: 
method_or_field_decl 
'void' identifier void_method_declarator_rest 
identifier constructor_declarator_rest 
generic_method_or_constructor_decl 
class_declaration 
interface_declaration 
--- 
method_or_field_decl: 
type identifier method_or_field_rest 
--- 
method_or_field_rest: 
field_declarators_rest ';' 
method_declarator_rest 
--- 
field_declarators_rest: 
variable_declarator_rest opt_comma_variable_declarator_list 
--- 
opt_comma_variable_declarator_list: 
comma_variable_declarator_list 

--- 
comma_variable_declarator_list: 
',' variable_declarator 
',' variable_declarator comma_variable_declarator_list 
--- 
opt_throw_qualified_identifier_list: 
'throws' qualified_identifier_list 

--- 
method_declarator_rest: 
formal_parameters opt_array_suffix_list opt_throw_qualified_identifier_list block 
formal_parameters opt_array_suffix_list opt_throw_qualified_identifier_list ';' 
--- 
void_method_declarator_rest: 
formal_parameters opt_throw_qualified_identifier_list block 
formal_parameters opt_throw_qualified_identifier_list ';' 
--- 
constructor_declarator_rest: 
formal_parameters opt_throw_qualified_identifier_list block 
--- 
generic_method_or_constructor_decl: 
type_parameters generic_method_or_constructor_rest 
--- 
generic_method_or_constructor_rest: 
'void' identifier method_declarator_rest 
type identifier method_declarator_rest 
identifier constructor_declarator_rest 
--- 
interface_body: 
'{' opt_interface_body_declaration_list '}' 
--- 
opt_interface_body_declaration_list: 
interface_body_declaration_list 

--- 
interface_body_declaration_list: 
interface_body_declaration 
interface_body_declaration interface_body_declaration_list 
--- 
interface_body_declaration: 
';' 
opt_modifier_list interface_member_decl 
--- 
interface_member_decl: 
interface_method_or_field_decl 
'void' identifier void_interface_method_declarator_rest 
interface_generic_method_decl 
class_declaration 
interface_declaration 
--- 
interface_method_or_field_decl: 
type identifier interface_method_or_field_rest 
--- 
interface_method_or_field_rest: 
constant_declarators_rest ';' 
interface_method_declarator_rest 
--- 
constant_declarators_rest: 
constant_declarator_rest opt_comma_constant_declarator_list 
--- 
opt_comma_constant_declarator_list: 
comma_constant_declarator_list 
--- 
comma_constant_declarator_list: 
',' constant_declarator 
',' constant_declarator comma_constant_declarator_list 
--- 
constant_declarator_rest: 
opt_array_suffix_list '=' variable_initializer 
--- 
constant_declarator: 
identifier constant_declarator_rest 
--- 
interface_method_declarator_rest: 
formal_parameters opt_array_suffix_list opt_throw_qualified_identifier_list ';' 
--- 
void_interface_method_declarator_rest: 
formal_parameters opt_throw_qualified_identifier_list ';' 
--- 
interface_generic_method_decl: 
type_parameters type identifier interface_method_declarator_rest 
type_parameters 'void' identifier interface_method_declarator_rest 
--- 
formal_parameters: 
'(' ')' 
'(' formal_parameter_decls ')' 
--- 
formal_parameter_decls: 
opt_final type formal_parameter_decls_rest 
--- 
opt_final: 
'final' 

--- 
formal_parameter_decls_rest: 
variable_declarator_id 
variable_declarator_id ',' formal_parameter_decls 
'...' variable_declarator_id 
--- 
variable_declarator_id: 
identifier opt_array_suffix_list 
--- 
variable_declarators: 
variable_declarator opt_comma_variable_declarator_list 
--- 
variable_declarator: 
identifier variable_declarator_rest 
--- 
variable_declarator_rest: 
opt_array_suffix_list 
opt_array_suffix_list '=' variable_initializer 
--- 
variable_initializer: 
array_initializer 
expression 
--- 
variable_initializer_list: 
variable_initializer 
variable_initializer_list ',' variable_initializer
--- 
array_initializer: 
'{' '}' 
'{' variable_initializer_list '}' 
'{' variable_initializer_list ',' '}' 
--- 
block: 
'{' block_statements '}' 
--- 
block_statements: 
block_statement 
block_statement block_statements 
--- 
block_statement: 
local_variable_declaration_statement 
class_or_interface_declaration 
statement 
--- 
local_variable_declaration_statement: 
type variable_declarators ';'
'final' type variable_declarators ';' 
--- 
opt_identifier: 
identifier 

--- 
statement: 
block 
';' 
identifier ':' statement 
statement_expression ';' 
'if' par_expression statement 
'if' par_expression statement 'else' statement 
'assert' expression ':' expression ';' 
'assert' expression ';' 
'switch' par_expression '{' switch_block_statement_groups '}' 
'while' par_expression statement 
'do' statement 'while' par_expression ';' 
'for' '(' for_control ')' statement 
'break' opt_identifier ';' 
'continue' opt_identifier ';' 
'return' opt_expression ';' 
'throw' expression ';' 
'synchronized' par_expression block 
'try' block catches 
'try' block opt_catches finally 
'try' resource_specification block opt_catches 
'try' resource_specification block opt_catches finally 
--- 
statement_expression: 
expression 
--- 
opt_catches: 
catches 

--- 
catches: 
catch_clause
catch_clause catches
--- 
catch_clause: 
'catch' '(' opt_final catch_type identifier ')' block 
--- 
catch_type: 
qualified_identifier 
qualified_identifier '|' catch_type 
--- 
finally: 
'finally' block 
--- 
resource_specification: 
'(' resources ')' 
'(' resources ';' ')' 
--- 
resources: 
resource 
resources ';' resource 
--- 
resource: 
opt_final reference_type variable_declarator_id '=' expression 
--- 
switch_block_statement_groups: 
switch_block_statement_group 
switch_block_statement_group switch_block_statement_groups 
--- 
switch_block_statement_group: 
switch_labels block_statements 
--- 
switch_labels: 
switch_label 
switch_label switch_labels 
--- 
switch_label: 
'case' expression ':' 
'default' ':' 
--- 
opt_expression: 
expression

--- 
opt_for_update: 
for_update 

--- 
for_control: 
for_var_control 
for_init ';' opt_expression ';' opt_for_update 
--- 
for_var_control: 
type variable_declarator_id for_var_control_rest
'final' type variable_declarator_id for_var_control_rest 
--- 
for_var_control_rest: 
for_variable_declarators_rest ';' opt_expression ';' opt_for_update 
':' expression 
--- 
for_variable_declarators_rest: 
opt_comma_variable_declarator_list 
'=' variable_initializer opt_comma_variable_declarator_list 
--- 
for_init: 
statement_expression 
statement_expression ',' for_init
---
for_update: 
statement_expression 
statement_expression ',' for_update 
--- 
expression: 
expression1 
expression1 assignment_operator expression1 
--- 
assignment_operator: 
'=' 
'+=' 
'-=' 
'*=' 
'/=' 
'&=' 
'|=' 
'^=' 
'%=' 
'<<=' 
'>>=' 
'>>>=' 
--- 
expression1: 
expression2 
expression2 expression1_rest 
--- 
expression1_rest: 
'?' expression ':' expression1 
--- 
expression2: 
expression3 
expression3 expression2_rest 
--- 
expression2_rest: 
infix_op_expression3_list 
'instanceof' type 
--- 
infix_op_expression3_list: 
infix_op expression3 
infix_op expression3 infix_op_expression3_list
--- 
infix_op: 
'||' 
'&&' 
'|' 
'^' 
'&' 
'==' 
'!=' 
'<' 
'>' 
'<=' 
'>=' 
'<<' 
'>>' 
'>>>' 
'+' 
'-' 
'*' 
'/' 
'%' 
--- 
expression3: 
prefix_op expression3 
'(' type ')' expression3 
par_expression expression3 
primary opt_selector_list opt_postfix_op_list 
---
opt_selector_list: 
selector_list 

--- 
opt_postfix_op_list: 
postfix_op_list 

--- 
postfix_op_list: 
postfix_op 
postfix_op postfix_op_list 
--- 
selector_list: 
selector 
selector selector_list 
--- 
prefix_op: 
'++' 
'--' 
'!' 
'~' 
'+' 
'-' 
--- 
postfix_op: 
'++' 
'--' 
--- 
primary: 
literal 
par_expression 
'this' 
'this' arguments 
'super' super_suffix 
'new' creator 
non_wildcard_type_arguments explicit_generic_invocation_suffix 
non_wildcard_type_arguments 'this' arguments 
identifier_list 
identifier_list identifier_suffix 
basic_type opt_array_suffix_list '.' 'class' 
'void' '.' 'class' 
--- 
literal: 
int_literal 
float_literal 
char_literal 
string_literal 
boolean_literal 
null_literal 
--- 
par_expression: 
'(' expression ')' 
--- 
expression_list: 
expression 
expression ',' expression_list 
--- 
arguments: 
'(' expression_list ')' 
'(' ')' 
--- 
super_suffix: 
arguments 
'.' identifier 
'.' identifier arguments 
--- 
explicit_generic_invocation_suffix: 
'super' super_suffix 
identifier arguments 
--- 
creator: 
non_wildcard_type_arguments created_name class_creator_rest 
created_name class_creator_rest 
created_name array_creator_rest 
--- 
created_name: 
created_name_element 
created_name_element '.' created_name 
--- 
created_name_element: 
identifier type_arguments_or_diamond 
identifier 
--- 
class_creator_rest: 
arguments 
arguments class_body 
--- 
expression_list_with_brace: 
'[' expression ']' 
expression_list_with_brace '[' expression ']'  
--- 
array_creator_rest: 
expression_list_with_brace opt_array_suffix_list 
array_suffix_list array_initializer 
--- 
identifier_suffix: 
'[' opt_array_suffix_list '.' 'class' ']' 
'[' expression ']' 
arguments 
'.' 'class' 
'.' explicit_generic_invocation 
'.' 'this' 
'.' 'super' arguments 
'.' 'new' inner_creator 
'.' 'new' non_wildcard_type_arguments inner_creator 
--- 
explicit_generic_invocation: 
non_wildcard_type_arguments explicit_generic_invocation_suffix 
--- 
inner_creator: 
identifier class_creator_rest 
identifier non_wildcard_type_arguments_or_diamond class_creator_rest 
--- 
selector: 
'.' identifier 
'.' identifier arguments 
'.' explicit_generic_invocation 
'.' 'this' 
'.' 'super' super_suffix 
'.' 'new' inner_creator 
'.' 'new' non_wildcard_type_arguments inner_creator 
'[' expression ']' 
--- 
enum_body: 
'{' opt_enum_constants opt_enum_body_declarations '}' 
--- 
opt_enum_constants 
enum_constants 

---
opt_enum_body_declarations: 
enum_body_declarations 

--- 
enum_constants: 
enum_constant 
enum_constants ',' enum_constant 
--- 
enum_constant: 
identifier 
identifier arguments 
identifier class_body 
identifier arguments class_body 
--- 
enum_body_declarations: 
';' class_body_declaration_list 
';' 
--- 
boolean_literal:
'true'
'false'
---
string_literal:
STRINGLITERAL
---
null_literal:
'null'
---
int_literal:
INTLITERAL
---
float_literal:
FLOATLITERAL
---
char_literal:
CHARLITERAL
---