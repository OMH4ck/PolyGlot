program: 
statementList
---
statement: 
block
variableStatement
importStatement
exportStatement
emptyStatement
classDeclaration
expressionStatement
ifStatement
iterationStatement
continueStatement
breakStatement
returnStatement
yieldStatement
withStatement
labelledStatement
switchStatement
throwStatement
tryStatement
debuggerStatement
functionDeclaration
---
block:
'{' statementList '}'
'{' '}'
---
statementList:
statementList statement
statement
---
importStatement:
IMPORT importFromBlock
---
importFromBlock:
importDefault importNamespace importFrom eos
importNamespace importFrom eos
importDefault moduleItems importFrom eos
moduleItems importFrom eos
stringLiteral eos
---
moduleItems:
'{' aliasNameList '}'
'{' aliasNameList ',' '}'
---
aliasNameList:
aliasNameList ',' aliasName 
aliasName
---
importDefault:
aliasName ','
---
importNamespace:
'*' AS idName
'*'
---
importFrom
FROM stringLiteral
---
aliasName:
idName AS idName
idName
---
exportStatement:
EXPORT declaration eos
EXPORT exportFromBlock eos
EXPORT DEFAULT singleExpression eos
---
exportFromBlock:
importNamespace importFrom eos
moduleItems importFrom eos
moduleItems eos
---
declaration:
variableStatement
classDeclaration
functionDeclaration
---
variableStatement:
varModifier variableDeclarationList eos
---
variableDeclarationList:
variableDeclarationList ',' variableDeclaration
variableDeclaration
---
variableDeclaration:
assignable '=' singleExpression
assignable
---
emptyStatement:
';'
---
expressionStatement:
expressionSequence eos
---
ifStatement:
IF '(' expressionSequence ')' statement ELSE statement
IF '(' expressionSequence ')' statement
---
iterationStatement:
DO statement WHILE '(' expressionSequence ')' eos 
WHILE '(' expressionSequence ')' statement
FOR '(' variableStatement ';' optExpressionSequence ';' optExpressionSequence ')' statement
FOR '(' expressionSequence ';' optExpressionSequence ';' optExpressionSequence ')' statement 
FOR '(' ';' optExpressionSequence ';' optExpressionSequence ')' statement
FOR '(' variableStatement IN expressionSequence ')' statement
FOR '(' singleExpression IN expressionSequence ')' statement
FOR AWAIT '(' singleExpression OF expressionSequence ')' statement
FOR '(' singleExpression OF expressionSequence ')' statement
FOR AWAIT '(' variableStatement OF expressionSequence ')' statement
FOR '(' variableStatement OF expressionSequence ')' statement
---
optExpressionSequence:

expressionSequence
---
varModifier:
VAR
LET
CONST
---
optIdentifier:
identifier

---
continueStatement:
CONTINUE optIdentifier eos
---
breakStatement:
BREAK optIdentifier eos
---
returnStatement:
RETURN optIdentifier eos
---
yieldStatement:
YIELD optIdentifier eos
---
withStatement:
WITH '(' expressionSequence ')' statement
---
switchStatement:
SWITCH '(' expressionSequence ')' caseBlock
---
caseBlock:
'{' caseClauses defaultClause caseClauses '}'
'{' defaultClause caseClauses '}'
'{' caseClauses defaultClause '}'
'{' defaultClause '}'
'{' caseClauses '}'
'{' '}'
---
caseClauses:
caseClauses caseClause
caseClause
---
caseClause:
CASE expressionSequence ':' statementList
CASE expressionSequence ':'
---
defaultClause:
DEFAULT ':' statementList
DEFAULT ':'
---
labelledStatement:
identifier ':' statement
---
throwStatement:
THROW expressionSequence eos
---
tryStatement:
TRY block finallyProduction
TRY block catchProduction finallyProduction
TRY block catchProduction
---
catchProduction:
CATCH '(' assignable ')' block
CATCH '(' ')' block
CATCH block
---
finallyProduction:
FINALLY block
---
debuggerStatement:
DEBUGGER eos
---
functionDeclaration:
ASYNC FUNCTION '*' identifier '(' optFormalParameterList ')' '{' functionBody '}'
FUNCTION '*' identifier '(' optFormalParameterList ')' '{' functionBody '}'
ASYNC FUNCTION identifier '(' optFormalParameterList ')' '{' functionBody '}'
FUNCTION identifier '(' optFormalParameterList ')' '{' functionBody '}'
---
optFormalParameterList:

formalParameterList
---
classDeclaration:
CLASS identifier classTail
---
classTail:
EXTENDS singleExpression '{' optClassElement '}'
'{' optClassElement '}'
---
optClassElement:
classElement

---
classElement:
STATIC methodDefinition
identifier methodDefinition
ASYNC methodDefinition
methodDefinition
emptyStatement
'#' propertyName '=' singleExpression
 propertyName '=' singleExpression
---
methodDefinition:
'*' '#' propertyName '(' optFormalParameterList ')' '{' functionBody '}'
'*' '#' getter '(' ')' '{' functionBody '}'
'*' '#' setter '(' optFormalParameterList ')' '{' functionBody '}'
'*' propertyName '(' optFormalParameterList ')' '{' functionBody '}'
'*' getter '(' ')' '{' functionBody '}'
'*' setter '(' optFormalParameterList ')' '{' functionBody '}'
'#' propertyName '(' optFormalParameterList ')' '{' functionBody '}'
'#' getter '(' ')' '{' functionBody '}'
'#' setter '(' optFormalParameterList ')' '{' functionBody '}'
propertyName '(' optFormalParameterList ')' '{' functionBody '}'
getter '(' ')' '{' functionBody '}'
setter '(' optFormalParameterList ')' '{' functionBody '}'
---
formalParameterList:
formalParameterListWithoutLast ',' lastFormalParameterArg
formalParameterListWithoutLast
lastFormalParameterArg
---
formalParameterListWithoutLast:
formalParameterListWithoutLast ',' formalParameterArg
formalParameterArg
---
formalParameterArg:
assignable '=' singleExpression
assignable
---
lastFormalParameterArg:
ELLIPSIS singleExpression
---
functionBody:
statementList

---
arrayLiteral:
'[' optElementList ']'
---
optElementList:
elementList

---
elementList:
singleElement
elementList singleElement
---
singleElement:
',' arrayElement
','
---
arrayElement:
ELLIPSIS singleExpression
singleExpression
---
objectLiteral:
'{' propertyAssignmentList ',' '}'
'{' ',' '}'
'{' propertyAssignmentList '}'
'{' '}'
---
propertyAssignmentList:
propertyAssignmentList ',' propertyAssignment
propertyAssignment
---
propertyAssignment:
propertyName ':' singleExpression
'[' singleExpression ']' ':' singleExpression 
ASYNC '*' propertyName '(' optFormalParameterList ')' '{' functionBody '}'
'*' propertyName '(' optFormalParameterList ')' '{' functionBody '}' 
ASYNC propertyName '(' optFormalParameterList ')' '{' functionBody '}'
propertyName '(' optFormalParameterList ')' '{' functionBody '}'
getter '(' ')' '{' functionBody '}' 
setter '(' formalParameterArg ')' '{' functionBody '}'
singleExpression
ELLIPSIS singleExpression
---
propertyName: 
idName
stringLiteral
numberLiteral
'[' singleExpression ']'
---
arguments:
'(' argumentList ',' ')'
'(' argumentList ')'
'(' ')'
---
argumentList:
argumentList ',' argument
argument
---
argument: 
ELLIPSIS singleExpression
ELLIPSIS identifier
singleExpression
identifier
---
expressionSequence:
expressionSequence ',' singleExpression
singleExpression
---
singleExpression: 
anoymousFunction 
CLASS optIdentifier classTail 
singleExpression '[' expressionSequence ']' 
singleExpression '?' '.' '#' idName 
singleExpression '?' '.' idName 
singleExpression '.' '#' idName 
singleExpression '.' idName 
singleExpression arguments
NEW singleExpression arguments
NEW singleExpression 
NEW '.' identifier
singleExpression '++'
singleExpression '--'
DELETE singleExpression 
VOID singleExpression 
TYPEOF singleExpression
'++' singleExpression
'--' singleExpression
'+' singleExpression
'-' singleExpression
'~' singleExpression
'!' singleExpression
AWAIT singleExpression
singleExpression '**' singleExpression 
singleExpression star_or_div_or_mod singleExpression 
singleExpression plus_or_mins singleExpression 
singleExpression '??' singleExpression
singleExpression ls_or_rs_or_rrs singleExpression 
singleExpression compare_with singleExpression 
singleExpression INSTANCEOF singleExpression 
singleExpression IN singleExpression 
singleExpression equal_or_nequal singleExpression 
singleExpression '&' singleExpression 
singleExpression '^' singleExpression 
singleExpression '|' singleExpression 
singleExpression '&&' singleExpression
singleExpression '||' singleExpression
singleExpression '?' singleExpression ':' singleExpression
singleExpression '=' singleExpression 
singleExpression assignmentOperator singleExpression
IMPORT '(' singleExpression ')' 
yieldStatement
THIS
identifier
SUPER 
literal 
arrayLiteral
objectLiteral
'(' expressionSequence ')'
---
plus_or_mins:
'+'
'-'
---
equal_or_nequal:
'=='
'!='
'==='
'!=='
---
star_or_div_or_mod:
'*'
'/'
'%'
---
ls_or_rs_or_rrs:
'<<'
'>>'
'>>>'
---
compare_with:
'<'
'>'
'<='
'>='
---
assignable: 
identifier
arrayLiteral
objectLiteral
---
anoymousFunction: 
functionDeclaration 
ASYNC FUNCTION '*' '(' optFormalParameterList ')' '{' functionBody '}' 
ASYNC FUNCTION '(' optFormalParameterList ')' '{' functionBody '}' 
FUNCTION '*' '(' optFormalParameterList ')' '{' functionBody '}' 
FUNCTION '(' optFormalParameterList ')' '{' functionBody '}'
ASYNC arrowFunctionParameters '=>' arrowFunctionBody 
arrowFunctionParameters '=>' arrowFunctionBody
---
arrowFunctionParameters: 
identifier
'(' optFormalParameterList ')'
---
arrowFunctionBody: 
singleExpression
'{' functionBody '}'
---
assignmentOperator:
'*='
'/='
'%='
'+='
'-='
'<<='
'>>='
'>>>='
'&='
'^='
'|='
'**='
---
literal: 
nullLiteral
booleanLiteral
stringLiteral
numberLiteral
---
numberLiteral: 
intLiteral
floatLiteral
---
intLiteral:
INTLITERAL
---
floatLiteral:
FLOATLITERAL
---
idName: 
identifier
reservedWord
---
booleanLiteral:
TRUE
FALSE
---
nullLiteral:
NULL
---
reservedWord: 
keyword
booleanLiteral
nullLiteral
---
keyword: 
BREAK
DO
INSTANCEOF
TYPEOF
CASE
ELSE
NEW
VAR
CATCH
FINALLY
RETURN
VOID
CONTINUE
FOR
SWITCH
WHILE
DEBUGGER
FUNCTION
THIS
WITH
DEFAULT
IF
THROW
DELETE
IN
TRY
CLASS
ENUM
EXTENDS
SUPER
CONST
EXPORT
IMPORT
IMPLEMENTS
LET
PRIVATE
PUBLIC
INTERFACE
PACKAGE
PROTECTED
STATIC
YIELD
ASYNC
AWAIT
FROM
AS
---
getter: 
GET propertyName
---
setter
SET propertyName
---
eos: 
OP_SEMI
---
identifier:
IDENTIFIER
---
stringLiteral:
STRINGLITERAL
---
