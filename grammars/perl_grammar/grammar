program:
stmtseq
---
block:
'{' remember stmtseq '}'
---
formblock:
'=' remember ';' FORMRBRACK formstmtseq ';' '.'
---
remember:

---
mblock:
'{' stmtseq '}'
---
stmtseq:
fullstmt
stmtseq fullstmt
---
formstmtseq:

formstmtseq formline
---
fullstmt:
barestmt
labfullstmt
---
labfullstmt:
LABEL barestmt
LABEL labfullstmt
---
barestmt:
PLUGSTMT
FORMAT startformsub formname formblock
SUB subname startsub proto subattrlist optsubbody
SIGSUB subname startsub subattrlist optsigsubbody
PACKAGE bareword bareword ';'
USE startsub bareword bareword optlistexpr ';'
IF '(' remember mexpr ')' mblock else
UNLESS '(' remember mexpr ')' mblock else
GIVEN '(' remember mexpr ')' mblock
WHEN '(' remember mexpr ')' mblock
DEFAULT block
WHILE '(' remember texpr ')' mintro mblock cont
UNTIL '(' remember iexpr ')' mintro mblock cont
FOR '(' remember mnexpr ';' texpr ';' mintro mnexpr ')' mblock
FOR MY remember my_scalar '(' mexpr ')' mblock cont
FOR scalar '(' remember mexpr ')' mblock cont
FOR my_refgen remember my_var '(' mexpr ')' mblock cont
FOR REFGEN refgen_topic '(' remember mexpr ')' mblock cont
FOR '(' remember mexpr ')' mblock cont
block cont
PACKAGE bareword bareword '{' remember stmtseq '}'
sideff ';'
YADAYADA ';'
';'
---
formline:
THING formarg
---
formarg:

FORMLBRACK stmtseq FORMRBRACK
---
sideff:
expr
expr IF expr
expr UNLESS expr
expr WHILE expr
expr UNTIL iexpr
expr FOR expr
expr WHEN expr
---
else:

ELSE mblock
ELSIF '(' mexpr ')' mblock else
---
cont:

CONTINUE block
---
mintro:

---
nexpr:

sideff
---
texpr:

expr
---
iexpr:
expr
---
mexpr:
expr
---
mnexpr:
nexpr
---
formname:
bareword

---
startsub:

---
startanonsub:

---
startformsub:

---
subname:
bareword
PRIVATEREF
---
proto:

THING
---
subattrlist:

COLONATTR THING
COLONATTR
---
myattrlist:
COLONATTR THING
COLONATTR
---
sigvarname:

PRIVATEREF
---
sigslurpsigil:
'@'
'%'
---
sigslurpelem:
sigslurpsigil sigvarname sigdefault
---
sigdefault:

ASSIGNOP
ASSIGNOP term
---
sigscalarelem:
'$' sigvarname sigdefault
---
sigelem:
sigscalarelem
sigslurpelem
---
siglist:
siglist ','
siglist ',' sigelem
sigelem %prec PREC_LOW
---
siglistornull:

siglist
---
optsubsignature:

subsignature
---
subsignature:
'(' subsigguts ')'
---
subsigguts:
siglistornull
---
optsubbody:
subbody
';'
---
subbody:
remember '{' stmtseq '}'
---
optsigsubbody:
sigsubbody
';'
---
sigsubbody:
remember optsubsignature '{' stmtseq '}'
---
expr:
expr ANDOP expr
expr OROP expr
expr DOROP expr
listexpr %prec PREC_LOW
---
listexpr:
listexpr ','
listexpr ',' term
term %prec PREC_LOW
---
listop:
LSTOP indirob listexpr
FUNC '(' indirob expr ')'
term ARROW method '(' optexpr ')'
term ARROW method
METHOD indirob optlistexpr
FUNCMETH indirob '(' optexpr ')'
LSTOP optlistexpr
FUNC '(' optexpr ')'
FUNC SUBLEXSTART optexpr SUBLEXEND
LSTOPSUB startanonsub block optlistexpr %prec LSTOP
---
method:
METHOD
scalar
---
subscripted:
gelem '{' expr ';' '}'
scalar '[' expr ']'
term ARROW '[' expr ']'
subscripted '[' expr ']'
scalar '{' expr ';' '}'
term ARROW '{' expr ';' '}'
subscripted '{' expr ';' '}'
term ARROW '(' ')'
term ARROW '(' expr ')'
subscripted '(' expr ')'
subscripted '(' ')'
'(' expr ')' '[' expr ']'
QWLIST '[' expr ']'
'(' ')' '[' expr ']'
---
termbinop:
term ASSIGNOP term
term POWOP term
term MULOP term
term ADDOP term
term SHIFTOP term
term RELOP term
term EQOP term
term BITANDOP term
term BITOROP term
term DOTDOT term
term ANDAND term
term OROR term
term DORDOR term 
term MATCHOP term
---
termunop:
'-' term %prec UMINUS
'+' term %prec UMINUS
'!' term
'~' term
term POSTINC
term POSTDEC
term POSTJOIN
PREINC term
PREDEC term
---
anonymous:
'[' expr ']'
'[' ']'
HASHBRACK expr ';' '}'	%prec '('
HASHBRACK ';' '}'	%prec '('
ANONSUB startanonsub proto subattrlist subbody %prec '('
ANON_SIGSUB startanonsub subattrlist sigsubbody %prec '('
---
termdo:
DO term %prec UNIOP
DO block %prec '('
---
term:
termbinop
termunop
anonymous
termdo
term '?' term ':' term
REFGEN term
MY REFGEN term
myattrterm %prec UNIOP
LOCAL term %prec UNIOP
'(' expr ')'
QWLIST
'(' ')'
scalar %prec '('
star %prec '('
hsh %prec '('
ary %prec '('
arylen %prec '('
subscripted
sliceme '[' expr ']'
kvslice '[' expr ']'
sliceme '{' expr ';' '}'
kvslice '{' expr ';' '}'
THING %prec '('
amper
amper '(' ')'
amper '(' expr ')'
NOAMP subname optlistexpr
term ARROW '$' '*'
term ARROW '@' '*'
term ARROW '%' '*'
term ARROW '&' '*'
term ARROW '*' '*' %prec '('
LOOPEX
LOOPEX term
NOTOP listexpr
UNIOP
UNIOP block
UNIOP term
REQUIRE
REQUIRE term
UNIOPSUB
UNIOPSUB term
FUNC0
FUNC0 '(' ')'
FUNC0OP
FUNC0OP '(' ')'
FUNC0SUB
FUNC1 '(' ')'
FUNC1 '(' expr ')'
PMFUNC SUBLEXSTART listexpr optrepl SUBLEXEND
bareword
listop
PLUGEXPR
---
myattrterm:
MY myterm myattrlist
MY myterm
MY REFGEN myterm myattrlist
---
myterm:
'(' expr ')'
'(' ')'
scalar %prec '('
hsh %prec '('
ary %prec '('
---
optlistexpr:
%prec PREC_LOW
listexpr %prec PREC_LOW
---
optexpr:

expr
---
optrepl:

'/' expr
---
my_scalar:
scalar
---
my_var:
scalar
ary
hsh
---
refgen_topic:
my_var
amper
---
my_refgen:
MY REFGEN
REFGEN MY
---
amper:
'&' indirob
---
scalar:
'$' indirob
---
ary:
'@' indirob
---
hsh:
'%' indirob
---
arylen:
DOLSHARP indirob
term ARROW DOLSHARP '*'
---
star:
'*' indirob
---
sliceme:
ary
term ARROW '@'
---
kvslice:
hsh
term ARROW '%'
---
gelem:
star
term ARROW '*'
---
indirob:
bareword
scalar %prec PREC_LOW
block
PRIVATEREF
---
bareword:
int_literal
float_literal
string_literal
identifier
---
int_literal:
INTLITERAL
---
float_literal:
FLOATLITERAL
---
string_literal:
STRINGLITERAL
---
identifier:
IDENTIFIER
---